{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\IT354 Veb Sistemi1\\\\crypto-wallet-app\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null); // Sadrži userId, username, role\n  const [loading, setLoading] = useState(true); // Za proveru autentifikacije pri startu\n\n  useEffect(() => {\n    // Pokušaj da se uloguješ iz localStorage-a pri učitavanju aplikacije\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n        setIsAuthenticated(true);\n      } catch (e) {\n        console.error(\"Failed to parse user from localStorage\", e);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // U pravoj aplikaciji lozinke bi bile heširane na backendu\n      const response = await axios.get(`http://localhost:5000/users?username=${username}&password=${password}`);\n      if (response.data.length > 0) {\n        const fetchedUser = response.data[0];\n        const userPayload = {\n          id: fetchedUser.id,\n          username: fetchedUser.username,\n          role: fetchedUser.role\n        };\n        setUser(userPayload);\n        setIsAuthenticated(true);\n        localStorage.setItem('user', JSON.stringify(userPayload));\n        return true;\n      } else {\n        return false; // Pogrešni kredencijali\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return false;\n    }\n  };\n  const register = async (username, password) => {\n    try {\n      // Proveri da li korisnik već postoji\n      const checkUser = await axios.get(`http://localhost:5000/users?username=${username}`);\n      if (checkUser.data.length > 0) {\n        return false; // Korisnik već postoji\n      }\n\n      // Dodaj novog korisnika\n      const newUser = {\n        id: `user${Date.now()}`,\n        // Jednostavan ID, za pravu app koristio bi UUID\n        username,\n        password,\n        // U pravoj aplikaciji bi se hešovalo!\n        role: 'user'\n      };\n      const userResponse = await axios.post('http://localhost:5000/users', newUser);\n\n      // Kreiraj prazan novčanik za novog korisnika\n      await axios.post('http://localhost:5000/wallets', {\n        userId: newUser.id,\n        balances: {}\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      return false;\n    }\n  };\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const userId = user ? user.id : null;\n  const username = user ? user.username : null;\n  const userRole = user ? user.role : null;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user,\n      userId,\n      username,\n      userRole,\n      login,\n      register,\n      logout,\n      loading\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","storedUser","localStorage","getItem","parsedUser","JSON","parse","e","console","error","removeItem","login","username","password","response","get","data","length","fetchedUser","userPayload","id","role","setItem","stringify","register","checkUser","newUser","Date","now","userResponse","post","userId","balances","logout","userRole","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/IT354 Veb Sistemi1/crypto-wallet-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState(null); // Sadrži userId, username, role\r\n    const [loading, setLoading] = useState(true); // Za proveru autentifikacije pri startu\r\n\r\n    useEffect(() => {\r\n        // Pokušaj da se uloguješ iz localStorage-a pri učitavanju aplikacije\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n            try {\r\n                const parsedUser = JSON.parse(storedUser);\r\n                setUser(parsedUser);\r\n                setIsAuthenticated(true);\r\n            } catch (e) {\r\n                console.error(\"Failed to parse user from localStorage\", e);\r\n                localStorage.removeItem('user');\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async (username, password) => {\r\n        try {\r\n            // U pravoj aplikaciji lozinke bi bile heširane na backendu\r\n            const response = await axios.get(`http://localhost:5000/users?username=${username}&password=${password}`);\r\n            if (response.data.length > 0) {\r\n                const fetchedUser = response.data[0];\r\n                const userPayload = {\r\n                    id: fetchedUser.id,\r\n                    username: fetchedUser.username,\r\n                    role: fetchedUser.role\r\n                };\r\n                setUser(userPayload);\r\n                setIsAuthenticated(true);\r\n                localStorage.setItem('user', JSON.stringify(userPayload));\r\n                return true;\r\n            } else {\r\n                return false; // Pogrešni kredencijali\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login error:\", error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const register = async (username, password) => {\r\n        try {\r\n            // Proveri da li korisnik već postoji\r\n            const checkUser = await axios.get(`http://localhost:5000/users?username=${username}`);\r\n            if (checkUser.data.length > 0) {\r\n                return false; // Korisnik već postoji\r\n            }\r\n\r\n            // Dodaj novog korisnika\r\n            const newUser = {\r\n                id: `user${Date.now()}`, // Jednostavan ID, za pravu app koristio bi UUID\r\n                username,\r\n                password, // U pravoj aplikaciji bi se hešovalo!\r\n                role: 'user'\r\n            };\r\n            const userResponse = await axios.post('http://localhost:5000/users', newUser);\r\n            \r\n            // Kreiraj prazan novčanik za novog korisnika\r\n            await axios.post('http://localhost:5000/wallets', { userId: newUser.id, balances: {} });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Registration error:\", error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n    };\r\n\r\n    const userId = user ? user.id : null;\r\n    const username = user ? user.username : null;\r\n    const userRole = user ? user.role : null;\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, user, userId, username, userRole, login, register, logout, loading }}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}