{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[user,setUser]=useState(null);// Sadrži userId, username, role\nconst[loading,setLoading]=useState(true);// Za proveru autentifikacije pri startu\nuseEffect(()=>{// Pokušaj da se uloguješ iz localStorage-a pri učitavanju aplikacije\nconst storedUser=localStorage.getItem('user');if(storedUser){try{const parsedUser=JSON.parse(storedUser);setUser(parsedUser);setIsAuthenticated(true);}catch(e){console.error(\"Failed to parse user from localStorage\",e);localStorage.removeItem('user');}}setLoading(false);},[]);const login=async(username,password)=>{try{// U pravoj aplikaciji lozinke bi bile heširane na backendu\nconst response=await axios.get(\"http://localhost:5000/users?username=\".concat(username,\"&password=\").concat(password));if(response.data.length>0){const fetchedUser=response.data[0];const userPayload={id:fetchedUser.id,username:fetchedUser.username,role:fetchedUser.role};setUser(userPayload);setIsAuthenticated(true);localStorage.setItem('user',JSON.stringify(userPayload));return true;}else{return false;// Pogrešni kredencijali\n}}catch(error){console.error(\"Login error:\",error);return false;}};const register=async(username,password)=>{try{// Proveri da li korisnik već postoji\nconst checkUser=await axios.get(\"http://localhost:5000/users?username=\".concat(username));if(checkUser.data.length>0){return false;// Korisnik već postoji\n}// Dodaj novog korisnika\nconst newUser={id:\"user\".concat(Date.now()),// Jednostavan ID, za pravu app koristio bi UUID\nusername,password,// U pravoj aplikaciji bi se hešovalo!\nrole:'user'};const userResponse=await axios.post('http://localhost:5000/users',newUser);// Kreiraj prazan novčanik za novog korisnika\nawait axios.post('http://localhost:5000/wallets',{userId:newUser.id,balances:{}});return true;}catch(error){console.error(\"Registration error:\",error);return false;}};const logout=()=>{setIsAuthenticated(false);setUser(null);localStorage.removeItem('user');};const userId=user?user.id:null;const username=user?user.username:null;const userRole=user?user.role:null;return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,user,userId,username,userRole,login,register,logout,loading},children:!loading&&children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","storedUser","localStorage","getItem","parsedUser","JSON","parse","e","console","error","removeItem","login","username","password","response","get","concat","data","length","fetchedUser","userPayload","id","role","setItem","stringify","register","checkUser","newUser","Date","now","userResponse","post","userId","balances","logout","userRole","Provider","value","useAuth"],"sources":["C:/Users/HP/Desktop/IT354 Veb Sistemi1/crypto-wallet-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState(null); // Sadrži userId, username, role\r\n    const [loading, setLoading] = useState(true); // Za proveru autentifikacije pri startu\r\n\r\n    useEffect(() => {\r\n        // Pokušaj da se uloguješ iz localStorage-a pri učitavanju aplikacije\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n            try {\r\n                const parsedUser = JSON.parse(storedUser);\r\n                setUser(parsedUser);\r\n                setIsAuthenticated(true);\r\n            } catch (e) {\r\n                console.error(\"Failed to parse user from localStorage\", e);\r\n                localStorage.removeItem('user');\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async (username, password) => {\r\n        try {\r\n            // U pravoj aplikaciji lozinke bi bile heširane na backendu\r\n            const response = await axios.get(`http://localhost:5000/users?username=${username}&password=${password}`);\r\n            if (response.data.length > 0) {\r\n                const fetchedUser = response.data[0];\r\n                const userPayload = {\r\n                    id: fetchedUser.id,\r\n                    username: fetchedUser.username,\r\n                    role: fetchedUser.role\r\n                };\r\n                setUser(userPayload);\r\n                setIsAuthenticated(true);\r\n                localStorage.setItem('user', JSON.stringify(userPayload));\r\n                return true;\r\n            } else {\r\n                return false; // Pogrešni kredencijali\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login error:\", error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const register = async (username, password) => {\r\n        try {\r\n            // Proveri da li korisnik već postoji\r\n            const checkUser = await axios.get(`http://localhost:5000/users?username=${username}`);\r\n            if (checkUser.data.length > 0) {\r\n                return false; // Korisnik već postoji\r\n            }\r\n\r\n            // Dodaj novog korisnika\r\n            const newUser = {\r\n                id: `user${Date.now()}`, // Jednostavan ID, za pravu app koristio bi UUID\r\n                username,\r\n                password, // U pravoj aplikaciji bi se hešovalo!\r\n                role: 'user'\r\n            };\r\n            const userResponse = await axios.post('http://localhost:5000/users', newUser);\r\n            \r\n            // Kreiraj prazan novčanik za novog korisnika\r\n            await axios.post('http://localhost:5000/wallets', { userId: newUser.id, balances: {} });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Registration error:\", error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n    };\r\n\r\n    const userId = user ? user.id : null;\r\n    const username = user ? user.username : null;\r\n    const userRole = user ? user.role : null;\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, user, userId, username, userRole, login, register, logout, loading }}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}